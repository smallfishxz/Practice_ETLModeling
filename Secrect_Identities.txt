Question 1: Secret Identities

A company, Superheros Inc., manages all the superheros working in New York City. They store data for each superhero on everything from the number and type of villains slain to the number of vacation days taken. They also employ analysts to look at this data using an internal tool called SuperQuery and then generate reports that show how much each superhero should be paid, who is fighting the most crime, who is close to burnout, etc. SuperQuery allows analysts to run SQL queries on the tables of data. The problem is that when the data arrives in the database it contains the superhero's real identity. Only a few people at Superheros Inc. are allowed to know the true identity of each superhero. For those people who aren't, the SuperQuery tool must not show a superhero's real identity.

This question is intentionally left vague. The candidate should ask questions which surface the following constraints: There is a huge amount (TBs) of data. There are a large number of tables (100s). New data is continually being written to the database. A superhero's real identity is consistently identified in the data by some number, think of it as their Social Security Number (National Identification Number, for international candidates). When parsing a query entered into the SuperQuery tool, only the tables being queried can be retrieved, not individual columns. This is a realistic constraint that voids solutions that aim to anonymise identities in real-time at the tool, rather than data, level. Although it is good if the candidate first goes down this path and it does come with its own set of tradeoffs which the candidate should discuss.

[edit]What to look for in an answer

Anonymous Tokens Simply wiping out the real-identity won't do as anything other than simple anonymous aggregate analysis would be impossible (e.g. how would you calculate how much each superhero gets paid if you can't identify superheros in the data?). An improvement on this is replacing the real-identity with a random number. This would allow for slightly more sophisticated analysis but would make unique count queries (where a superhero could potentially appear in multiple table rows) or join queries (where you want to match the same superhero across multiple tables) impossible. The next logical step might be to hash the real-identity. At this point you can discuss the pros and cons of hashing and their implications for this problem (collisions, hash size, salting/security, reversibility). An ideal solution might be to maintain a secure mapping table between real-identity and anonymous token. Some followup discussions for this solution include maintaining this table, checking integrity, keeping it secure.
Data Anonymization As new data is continually being written to the database and the scale of the database prohibits a single machine from handling the anonymization, the candidate should identify the need for a distributed approach, such as MapReduce. The question now focuses on performance. If the number of superheros is small (small enough to fit into the memory of a single mapper machine) then an efficient Map Side Join could be performed between the original data and the identity mapping table. But, let's assume this isn't the case. The mapper could make use of a distributed cache or instead rely on a Reduce Side Join. The candidate should describe how to handle entries missing from the mapping (NULL is better than revealing the real-identity, but what are the implication of NULL). 
Data Pipeline & Storage How often should this anonymization be performed? Should it occur on a cycle or be in response to some trigger? What are tradeoffs between a cycle that is too fast and too slow? How would we determine which data needs to be anonymized (would we detect it ourselves or are we assuming the original tables already contain metadata indicating whether a column contains a superhero's real identity)? Once anonymization has been performed how best to store the data? A new column could be added to the existing table or a copy of the original table could be made. The candidate may suggest a date partition on the tables which makes appending new anonymized data more elegant. The candidate should discuss the pros and cons of each, in terms of disk usage, security and maintenance.
Frontend Tool & Security How would we ensure the SuperQuery tool only allows the right people to see a superhero's real-identity. One way would be to divide Superhero Inc. employees into two groups; those with access and those without. The tool could check the current viewer context on each request and determine which of the two groups the user belonged to. Based on that it could parse the query entered by the user to see which tables they are attempting to access and ensure they are a subset of the tables their group is allowed to access.
Extensions What if Superheros Inc. implements an additional data access tool such as SuperReport, which visualises data from the same database. How can the existing solution be applied? What if some superheros are tired of hiding in the shadows and publicly reveal their true identities. What are the implications for the candidate's solution?
